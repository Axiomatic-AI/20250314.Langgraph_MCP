steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/photonics-research-dashboard:$COMMIT_SHA', '.']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/photonics-research-dashboard:$COMMIT_SHA']

  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'run', 'deploy', 'photonics-research-dashboard',
      '--image', 'gcr.io/$PROJECT_ID/photonics-research-dashboard:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--set-env-vars', 'ANTHROPIC_API_KEY=$$ANTHROPIC_API_KEY,TAVILY_API_KEY=$$TAVILY_API_KEY,OPENROUTER_API_KEY=$$OPENROUTER_API_KEY'
    ]
    secretEnv: ['ANTHROPIC_API_KEY', 'TAVILY_API_KEY', 'OPENROUTER_API_KEY']

  # Perform preflight check to ensure service is running
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Waiting for service to be available..."
        sleep 30  # Give the service time to start up
        SERVICE_URL=$(gcloud run services describe photonics-research-dashboard --platform managed --region us-central1 --format "value(status.url)")
        echo "Service URL: $${SERVICE_URL}"
        
        # Check if service is responding
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" $${SERVICE_URL})
        if [ "$${STATUS}" == "200" ]; then
          echo " Service is up and running (HTTP 200)"
        else
          echo " Service returned HTTP $${STATUS}. It may still be starting up."
        fi

images:
  - 'gcr.io/$PROJECT_ID/photonics-research-dashboard:$COMMIT_SHA'

timeout: '1500s'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/ANTHROPIC_API_KEY/latest
      env: 'ANTHROPIC_API_KEY'
    - versionName: projects/$PROJECT_ID/secrets/TAVILY_API_KEY/latest
      env: 'TAVILY_API_KEY'
    - versionName: projects/$PROJECT_ID/secrets/OPENROUTER_API_KEY/latest
      env: 'OPENROUTER_API_KEY'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Use a high-CPU machine for faster builds
